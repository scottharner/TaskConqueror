//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("TaskConquerorModel", "GoalCategory_Goal", "GoalCategory", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TaskConqueror.Data.GoalCategory), "Goal", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TaskConqueror.Data.Goal), true)]
[assembly: EdmRelationshipAttribute("TaskConquerorModel", "Status_Goal", "Status", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TaskConqueror.Data.Status), "Goal", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TaskConqueror.Data.Goal), true)]
[assembly: EdmRelationshipAttribute("TaskConquerorModel", "Status_Project", "Status", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TaskConqueror.Data.Status), "Project", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TaskConqueror.Data.Project), true)]
[assembly: EdmRelationshipAttribute("TaskConquerorModel", "Status_Task", "Status", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TaskConqueror.Data.Status), "Task", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TaskConqueror.Data.Task), true)]
[assembly: EdmRelationshipAttribute("TaskConquerorModel", "TaskPriority_Task", "TaskPriority", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(TaskConqueror.Data.TaskPriority), "Task", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TaskConqueror.Data.Task), true)]
[assembly: EdmRelationshipAttribute("TaskConquerorModel", "GoalProject", "Goal", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TaskConqueror.Data.Goal), "Project", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TaskConqueror.Data.Project))]
[assembly: EdmRelationshipAttribute("TaskConquerorModel", "ProjectTask", "Project", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TaskConqueror.Data.Project), "Task", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(TaskConqueror.Data.Task))]

#endregion

namespace TaskConqueror.Data
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class TaskConquerorEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new TaskConquerorEntities object using the connection string found in the 'TaskConquerorEntities' section of the application configuration file.
        /// </summary>
        public TaskConquerorEntities() : base("name=TaskConquerorEntities", "TaskConquerorEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new TaskConquerorEntities object.
        /// </summary>
        public TaskConquerorEntities(string connectionString) : base(connectionString, "TaskConquerorEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new TaskConquerorEntities object.
        /// </summary>
        public TaskConquerorEntities(EntityConnection connection) : base(connection, "TaskConquerorEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Goal> Goals
        {
            get
            {
                if ((_Goals == null))
                {
                    _Goals = base.CreateObjectSet<Goal>("Goals");
                }
                return _Goals;
            }
        }
        private ObjectSet<Goal> _Goals;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GoalCategory> GoalCategories
        {
            get
            {
                if ((_GoalCategories == null))
                {
                    _GoalCategories = base.CreateObjectSet<GoalCategory>("GoalCategories");
                }
                return _GoalCategories;
            }
        }
        private ObjectSet<GoalCategory> _GoalCategories;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Project> Projects
        {
            get
            {
                if ((_Projects == null))
                {
                    _Projects = base.CreateObjectSet<Project>("Projects");
                }
                return _Projects;
            }
        }
        private ObjectSet<Project> _Projects;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Status> Status
        {
            get
            {
                if ((_Status == null))
                {
                    _Status = base.CreateObjectSet<Status>("Status");
                }
                return _Status;
            }
        }
        private ObjectSet<Status> _Status;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Task> Tasks
        {
            get
            {
                if ((_Tasks == null))
                {
                    _Tasks = base.CreateObjectSet<Task>("Tasks");
                }
                return _Tasks;
            }
        }
        private ObjectSet<Task> _Tasks;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TaskPriority> TaskPriorities
        {
            get
            {
                if ((_TaskPriorities == null))
                {
                    _TaskPriorities = base.CreateObjectSet<TaskPriority>("TaskPriorities");
                }
                return _TaskPriorities;
            }
        }
        private ObjectSet<TaskPriority> _TaskPriorities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Setting> Settings
        {
            get
            {
                if ((_Settings == null))
                {
                    _Settings = base.CreateObjectSet<Setting>("Settings");
                }
                return _Settings;
            }
        }
        private ObjectSet<Setting> _Settings;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Goals EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGoals(Goal goal)
        {
            base.AddObject("Goals", goal);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GoalCategories EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGoalCategories(GoalCategory goalCategory)
        {
            base.AddObject("GoalCategories", goalCategory);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Projects EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProjects(Project project)
        {
            base.AddObject("Projects", project);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Status EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStatus(Status status)
        {
            base.AddObject("Status", status);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Tasks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTasks(Task task)
        {
            base.AddObject("Tasks", task);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TaskPriorities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTaskPriorities(TaskPriority taskPriority)
        {
            base.AddObject("TaskPriorities", taskPriority);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Settings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSettings(Setting setting)
        {
            base.AddObject("Settings", setting);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TaskConquerorModel", Name="Goal")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Goal : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Goal object.
        /// </summary>
        /// <param name="title">Initial value of the Title property.</param>
        /// <param name="createdDate">Initial value of the CreatedDate property.</param>
        /// <param name="categoryID">Initial value of the CategoryID property.</param>
        /// <param name="statusID">Initial value of the StatusID property.</param>
        /// <param name="goalID">Initial value of the GoalID property.</param>
        public static Goal CreateGoal(global::System.String title, global::System.DateTime createdDate, global::System.Int32 categoryID, global::System.Int32 statusID, global::System.Int32 goalID)
        {
            Goal goal = new Goal();
            goal.Title = title;
            goal.CreatedDate = createdDate;
            goal.CategoryID = categoryID;
            goal.StatusID = statusID;
            goal.GoalID = goalID;
            return goal;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreatedDate
        {
            get
            {
                return _CreatedDate;
            }
            set
            {
                OnCreatedDateChanging(value);
                ReportPropertyChanging("CreatedDate");
                _CreatedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedDate");
                OnCreatedDateChanged();
            }
        }
        private global::System.DateTime _CreatedDate;
        partial void OnCreatedDateChanging(global::System.DateTime value);
        partial void OnCreatedDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CompletedDate
        {
            get
            {
                return _CompletedDate;
            }
            set
            {
                OnCompletedDateChanging(value);
                ReportPropertyChanging("CompletedDate");
                _CompletedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CompletedDate");
                OnCompletedDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _CompletedDate;
        partial void OnCompletedDateChanging(Nullable<global::System.DateTime> value);
        partial void OnCompletedDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CategoryID
        {
            get
            {
                return _CategoryID;
            }
            set
            {
                OnCategoryIDChanging(value);
                ReportPropertyChanging("CategoryID");
                _CategoryID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CategoryID");
                OnCategoryIDChanged();
            }
        }
        private global::System.Int32 _CategoryID;
        partial void OnCategoryIDChanging(global::System.Int32 value);
        partial void OnCategoryIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StatusID
        {
            get
            {
                return _StatusID;
            }
            set
            {
                OnStatusIDChanging(value);
                ReportPropertyChanging("StatusID");
                _StatusID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StatusID");
                OnStatusIDChanged();
            }
        }
        private global::System.Int32 _StatusID;
        partial void OnStatusIDChanging(global::System.Int32 value);
        partial void OnStatusIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GoalID
        {
            get
            {
                return _GoalID;
            }
            set
            {
                if (_GoalID != value)
                {
                    OnGoalIDChanging(value);
                    ReportPropertyChanging("GoalID");
                    _GoalID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GoalID");
                    OnGoalIDChanged();
                }
            }
        }
        private global::System.Int32 _GoalID;
        partial void OnGoalIDChanging(global::System.Int32 value);
        partial void OnGoalIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TaskConquerorModel", "GoalCategory_Goal", "GoalCategory")]
        public GoalCategory GoalCategory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GoalCategory>("TaskConquerorModel.GoalCategory_Goal", "GoalCategory").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GoalCategory>("TaskConquerorModel.GoalCategory_Goal", "GoalCategory").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GoalCategory> GoalCategoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GoalCategory>("TaskConquerorModel.GoalCategory_Goal", "GoalCategory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GoalCategory>("TaskConquerorModel.GoalCategory_Goal", "GoalCategory", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TaskConquerorModel", "Status_Goal", "Status")]
        public Status Status
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Status>("TaskConquerorModel.Status_Goal", "Status").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Status>("TaskConquerorModel.Status_Goal", "Status").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Status> StatusReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Status>("TaskConquerorModel.Status_Goal", "Status");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Status>("TaskConquerorModel.Status_Goal", "Status", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TaskConquerorModel", "GoalProject", "Project")]
        public EntityCollection<Project> Projects
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Project>("TaskConquerorModel.GoalProject", "Project");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Project>("TaskConquerorModel.GoalProject", "Project", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TaskConquerorModel", Name="GoalCategory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class GoalCategory : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new GoalCategory object.
        /// </summary>
        /// <param name="description">Initial value of the Description property.</param>
        /// <param name="categoryID">Initial value of the CategoryID property.</param>
        public static GoalCategory CreateGoalCategory(global::System.String description, global::System.Int32 categoryID)
        {
            GoalCategory goalCategory = new GoalCategory();
            goalCategory.Description = description;
            goalCategory.CategoryID = categoryID;
            return goalCategory;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CategoryID
        {
            get
            {
                return _CategoryID;
            }
            set
            {
                if (_CategoryID != value)
                {
                    OnCategoryIDChanging(value);
                    ReportPropertyChanging("CategoryID");
                    _CategoryID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CategoryID");
                    OnCategoryIDChanged();
                }
            }
        }
        private global::System.Int32 _CategoryID;
        partial void OnCategoryIDChanging(global::System.Int32 value);
        partial void OnCategoryIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TaskConquerorModel", "GoalCategory_Goal", "Goal")]
        public EntityCollection<Goal> Goals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Goal>("TaskConquerorModel.GoalCategory_Goal", "Goal");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Goal>("TaskConquerorModel.GoalCategory_Goal", "Goal", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TaskConquerorModel", Name="Project")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Project : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Project object.
        /// </summary>
        /// <param name="title">Initial value of the Title property.</param>
        /// <param name="createdDate">Initial value of the CreatedDate property.</param>
        /// <param name="statusID">Initial value of the StatusID property.</param>
        /// <param name="projectID">Initial value of the ProjectID property.</param>
        public static Project CreateProject(global::System.String title, global::System.DateTime createdDate, global::System.Int32 statusID, global::System.Int32 projectID)
        {
            Project project = new Project();
            project.Title = title;
            project.CreatedDate = createdDate;
            project.StatusID = statusID;
            project.ProjectID = projectID;
            return project;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreatedDate
        {
            get
            {
                return _CreatedDate;
            }
            set
            {
                OnCreatedDateChanging(value);
                ReportPropertyChanging("CreatedDate");
                _CreatedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedDate");
                OnCreatedDateChanged();
            }
        }
        private global::System.DateTime _CreatedDate;
        partial void OnCreatedDateChanging(global::System.DateTime value);
        partial void OnCreatedDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CompletedDate
        {
            get
            {
                return _CompletedDate;
            }
            set
            {
                OnCompletedDateChanging(value);
                ReportPropertyChanging("CompletedDate");
                _CompletedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CompletedDate");
                OnCompletedDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _CompletedDate;
        partial void OnCompletedDateChanging(Nullable<global::System.DateTime> value);
        partial void OnCompletedDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> EstimatedCost
        {
            get
            {
                return _EstimatedCost;
            }
            set
            {
                OnEstimatedCostChanging(value);
                ReportPropertyChanging("EstimatedCost");
                _EstimatedCost = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EstimatedCost");
                OnEstimatedCostChanged();
            }
        }
        private Nullable<global::System.Decimal> _EstimatedCost;
        partial void OnEstimatedCostChanging(Nullable<global::System.Decimal> value);
        partial void OnEstimatedCostChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StatusID
        {
            get
            {
                return _StatusID;
            }
            set
            {
                OnStatusIDChanging(value);
                ReportPropertyChanging("StatusID");
                _StatusID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StatusID");
                OnStatusIDChanged();
            }
        }
        private global::System.Int32 _StatusID;
        partial void OnStatusIDChanging(global::System.Int32 value);
        partial void OnStatusIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ProjectID
        {
            get
            {
                return _ProjectID;
            }
            set
            {
                if (_ProjectID != value)
                {
                    OnProjectIDChanging(value);
                    ReportPropertyChanging("ProjectID");
                    _ProjectID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ProjectID");
                    OnProjectIDChanged();
                }
            }
        }
        private global::System.Int32 _ProjectID;
        partial void OnProjectIDChanging(global::System.Int32 value);
        partial void OnProjectIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TaskConquerorModel", "Status_Project", "Status")]
        public Status Status
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Status>("TaskConquerorModel.Status_Project", "Status").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Status>("TaskConquerorModel.Status_Project", "Status").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Status> StatusReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Status>("TaskConquerorModel.Status_Project", "Status");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Status>("TaskConquerorModel.Status_Project", "Status", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TaskConquerorModel", "GoalProject", "Goal")]
        public EntityCollection<Goal> Goals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Goal>("TaskConquerorModel.GoalProject", "Goal");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Goal>("TaskConquerorModel.GoalProject", "Goal", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TaskConquerorModel", "ProjectTask", "Task")]
        public EntityCollection<Task> Tasks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Task>("TaskConquerorModel.ProjectTask", "Task");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Task>("TaskConquerorModel.ProjectTask", "Task", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TaskConquerorModel", Name="Setting")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Setting : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Setting object.
        /// </summary>
        /// <param name="name">Initial value of the Name property.</param>
        public static Setting CreateSetting(global::System.String name)
        {
            Setting setting = new Setting();
            setting.Name = name;
            return setting;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();

        #endregion
    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TaskConquerorModel", Name="Status")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Status : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Status object.
        /// </summary>
        /// <param name="description">Initial value of the Description property.</param>
        /// <param name="statusID">Initial value of the StatusID property.</param>
        public static Status CreateStatus(global::System.String description, global::System.Int32 statusID)
        {
            Status status = new Status();
            status.Description = description;
            status.StatusID = statusID;
            return status;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StatusID
        {
            get
            {
                return _StatusID;
            }
            set
            {
                if (_StatusID != value)
                {
                    OnStatusIDChanging(value);
                    ReportPropertyChanging("StatusID");
                    _StatusID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StatusID");
                    OnStatusIDChanged();
                }
            }
        }
        private global::System.Int32 _StatusID;
        partial void OnStatusIDChanging(global::System.Int32 value);
        partial void OnStatusIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TaskConquerorModel", "Status_Goal", "Goal")]
        public EntityCollection<Goal> Goals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Goal>("TaskConquerorModel.Status_Goal", "Goal");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Goal>("TaskConquerorModel.Status_Goal", "Goal", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TaskConquerorModel", "Status_Project", "Project")]
        public EntityCollection<Project> Projects
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Project>("TaskConquerorModel.Status_Project", "Project");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Project>("TaskConquerorModel.Status_Project", "Project", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TaskConquerorModel", "Status_Task", "Task")]
        public EntityCollection<Task> Tasks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Task>("TaskConquerorModel.Status_Task", "Task");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Task>("TaskConquerorModel.Status_Task", "Task", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TaskConquerorModel", Name="Task")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Task : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Task object.
        /// </summary>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        /// <param name="createdDate">Initial value of the CreatedDate property.</param>
        /// <param name="title">Initial value of the Title property.</param>
        /// <param name="statusID">Initial value of the StatusID property.</param>
        /// <param name="priorityID">Initial value of the PriorityID property.</param>
        /// <param name="taskID">Initial value of the TaskID property.</param>
        public static Task CreateTask(global::System.Boolean isActive, global::System.DateTime createdDate, global::System.String title, global::System.Int32 statusID, global::System.Int32 priorityID, global::System.Int32 taskID)
        {
            Task task = new Task();
            task.IsActive = isActive;
            task.CreatedDate = createdDate;
            task.Title = title;
            task.StatusID = statusID;
            task.PriorityID = priorityID;
            task.TaskID = taskID;
            return task;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreatedDate
        {
            get
            {
                return _CreatedDate;
            }
            set
            {
                OnCreatedDateChanging(value);
                ReportPropertyChanging("CreatedDate");
                _CreatedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CreatedDate");
                OnCreatedDateChanged();
            }
        }
        private global::System.DateTime _CreatedDate;
        partial void OnCreatedDateChanging(global::System.DateTime value);
        partial void OnCreatedDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> CompletedDate
        {
            get
            {
                return _CompletedDate;
            }
            set
            {
                OnCompletedDateChanging(value);
                ReportPropertyChanging("CompletedDate");
                _CompletedDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CompletedDate");
                OnCompletedDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _CompletedDate;
        partial void OnCompletedDateChanging(Nullable<global::System.DateTime> value);
        partial void OnCompletedDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StatusID
        {
            get
            {
                return _StatusID;
            }
            set
            {
                OnStatusIDChanging(value);
                ReportPropertyChanging("StatusID");
                _StatusID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StatusID");
                OnStatusIDChanged();
            }
        }
        private global::System.Int32 _StatusID;
        partial void OnStatusIDChanging(global::System.Int32 value);
        partial void OnStatusIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PriorityID
        {
            get
            {
                return _PriorityID;
            }
            set
            {
                OnPriorityIDChanging(value);
                ReportPropertyChanging("PriorityID");
                _PriorityID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PriorityID");
                OnPriorityIDChanged();
            }
        }
        private global::System.Int32 _PriorityID;
        partial void OnPriorityIDChanging(global::System.Int32 value);
        partial void OnPriorityIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TaskID
        {
            get
            {
                return _TaskID;
            }
            set
            {
                if (_TaskID != value)
                {
                    OnTaskIDChanging(value);
                    ReportPropertyChanging("TaskID");
                    _TaskID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TaskID");
                    OnTaskIDChanged();
                }
            }
        }
        private global::System.Int32 _TaskID;
        partial void OnTaskIDChanging(global::System.Int32 value);
        partial void OnTaskIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> SortOrder
        {
            get
            {
                return _SortOrder;
            }
            set
            {
                OnSortOrderChanging(value);
                ReportPropertyChanging("SortOrder");
                _SortOrder = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SortOrder");
                OnSortOrderChanged();
            }
        }
        private Nullable<global::System.Int32> _SortOrder;
        partial void OnSortOrderChanging(Nullable<global::System.Int32> value);
        partial void OnSortOrderChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TaskConquerorModel", "Status_Task", "Status")]
        public Status Status
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Status>("TaskConquerorModel.Status_Task", "Status").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Status>("TaskConquerorModel.Status_Task", "Status").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Status> StatusReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Status>("TaskConquerorModel.Status_Task", "Status");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Status>("TaskConquerorModel.Status_Task", "Status", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TaskConquerorModel", "TaskPriority_Task", "TaskPriority")]
        public TaskPriority TaskPriority
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TaskPriority>("TaskConquerorModel.TaskPriority_Task", "TaskPriority").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TaskPriority>("TaskConquerorModel.TaskPriority_Task", "TaskPriority").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TaskPriority> TaskPriorityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TaskPriority>("TaskConquerorModel.TaskPriority_Task", "TaskPriority");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TaskPriority>("TaskConquerorModel.TaskPriority_Task", "TaskPriority", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TaskConquerorModel", "ProjectTask", "Project")]
        public EntityCollection<Project> Projects
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Project>("TaskConquerorModel.ProjectTask", "Project");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Project>("TaskConquerorModel.ProjectTask", "Project", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="TaskConquerorModel", Name="TaskPriority")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TaskPriority : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new TaskPriority object.
        /// </summary>
        /// <param name="description">Initial value of the Description property.</param>
        /// <param name="priorityID">Initial value of the PriorityID property.</param>
        public static TaskPriority CreateTaskPriority(global::System.String description, global::System.Int32 priorityID)
        {
            TaskPriority taskPriority = new TaskPriority();
            taskPriority.Description = description;
            taskPriority.PriorityID = priorityID;
            return taskPriority;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PriorityID
        {
            get
            {
                return _PriorityID;
            }
            set
            {
                if (_PriorityID != value)
                {
                    OnPriorityIDChanging(value);
                    ReportPropertyChanging("PriorityID");
                    _PriorityID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PriorityID");
                    OnPriorityIDChanged();
                }
            }
        }
        private global::System.Int32 _PriorityID;
        partial void OnPriorityIDChanging(global::System.Int32 value);
        partial void OnPriorityIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("TaskConquerorModel", "TaskPriority_Task", "Task")]
        public EntityCollection<Task> Tasks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Task>("TaskConquerorModel.TaskPriority_Task", "Task");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Task>("TaskConquerorModel.TaskPriority_Task", "Task", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
